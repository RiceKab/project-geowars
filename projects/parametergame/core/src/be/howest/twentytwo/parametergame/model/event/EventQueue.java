package be.howest.twentytwo.parametergame.model.event;

import java.util.ArrayList;
import java.util.Collection;
import java.util.List;
import java.util.Map;

import be.howest.twentytwo.parametergame.model.event.collision.BaseCollisionEvent;
import be.howest.twentytwo.parametergame.model.event.collision.GravityStartEvent;
import be.howest.twentytwo.parametergame.model.event.game.BaseGameEvent;
import be.howest.twentytwo.parametergame.model.event.listener.IEventListener;

/**
 * Manages all game events that are generated by systems to be distributed to any relevant
 * observers.
 */
public class EventQueue{
	
	private Collection<IEvent> events;
	private Map<EventEnum, Collection<IEventListener<IEvent>>> eventListeners;
	
	public EventQueue(){
		this.register(EventEnum.PLAYER_HIT, new IEventListener<GravityStartEvent>() {

			@Override
			public void handle(GravityStartEvent event) {
				System.out.println("GravStartEvt Handle");
			}
		});
	}
	
	/**
	 * Parse out all queued messages.
	 */
	public void dispatch(){
		for(IEvent evt : events){
			Collection<IEventListener<IEvent>> listeners = eventListeners.get(evt.getID());
			if(listeners != null){
				for(IEventListener<IEvent> cb : listeners){
					cb.handle(evt);
				}
			}
		}
	}
	
	/**
	 * Register a callback for a certain event
	 */
	public <T extends IEvent> void  register(EventEnum eventID, IEventListener<T> callback){
		Collection<IEventListener<IEvent>> listeners = eventListeners.get(eventID);
		if(listeners != null){
			listeners.add(callback);
		}
	}
	
}
